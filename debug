from  my_fun import *

def sum_square(p,q):
    out_sum=p+q
    out_sum_square=out_sum**2
    return(out_sum_square)


#定义本文件内函数:平方求和 #注意这是错误代码(ij)
def squ_sum(n):
    ss=0
    for j in range(n):
        ss=ss+(j+1)**2
    return(ss)

# a=3
# b=4
# out1 = sum_square(a,b)
# print('{a}及{b}求和的平方输出是{out1}'.format(a=a,b=b,out1=out1))

#for循环，使用外部文件斐波那契数列函数
# for i in range(5):
#     out2 = Fib(i+1)
#     print('包含{i}项的菲波那切数列数列为{l}'.format(i=i+1,l=out2))


#for循环，使用本文件的平方求和函数
for i in range(5):
    print('第{num}个数' .format(num=i+1))
    out3 = squ_sum(i+1)
    print('累加平方求和值为{sum}'.format(sum=out3))

# #step over 单步执行
# #step into 进入子函数，但可能进入源码，外部库
# #step into mycode 只进入自己写的子函数，不会进入外部库
# #step out 1.执行在函数内时，利用step out可执行完并返回
# # 2.在for循环中，点击一次执行一个循环
# # 3.不在函数及for中时，直接执行到下一断点
# # 4.三者都不，执行结束
# #
# def digit_bit(number):
#     bit = 1
#     test = 1
#     divisor = 10
#     while test >= 1:
#         test = number // divisor
#         if test >= 1:
#             bit = bit + 1
#             divisor = divisor * 10
#     return bit
#
#
# def list_number_digit_bit(input_list):
#     result = [digit_bit(i) for i in input_list]
#     return result
#
#
# def lexicon_order(input_list):
#     digit_bit_list = list_number_digit_bit(input_list)
#     max_bit = max(digit_bit_list)
#     alpha = 1 / max_bit
#     dict_of_number = {}
#     for i in input_list:
#         if digit_bit(i) == max_bit:
#             dict_of_number[i] = i
#         else:
#             bit = digit_bit(i)
#             new_digit = (i * 10 ** (max_bit - bit)) - 0.5 * alpha * (max_bit - bit)
#             dict_of_number[new_digit] = i
#     key_of_dict_of_number = list(dict_of_number.keys())
#     key_of_dict_of_number.sort()
#     lexicon_order_number = [dict_of_number[i] for i in key_of_dict_of_number]
#     return lexicon_order_number
#
#
# def find_the_number(n, k):
#     number_list = list(range(1, n + 1))
#     lexicon_order_number = lexicon_order(number_list)
#     result = lexicon_order_number[k - 1]
#     print('The lexicographical order is: ', lexicon_order_number)
#     print('so the ', k, 'th smallest number is:', result)
#     return result
#
#
# for i in range(1,11):
#     print(i)
#     r = find_the_number(n=13, k=i)
#     print(r)

#
# # 多断点
# # #利用console控制台控制输出列表,或变量赋值
# #
# def twice(n):
#     n *= 2
#     return n
#
# a =int(input("a:"))
# b =int(input("b:"))
# if a > 3:
#     b += 4
#     if b > 5:
#         c = a + twice(b)
#     else:
#         c = twice(a) + b
# else:
#     b -= 2
#     if b < 1:
#         c = a - twice(b)
#     else:
#         c = twice(a) - b
# print(c)
#
# #
# #调试演示
# #error1：目标求得平均值，此处为累加值
# def find_average(values):
#     result = 0
#     for v in values:
#         result += v/len(values)
#     return result
#
# print("AVERAGE", find_average([5,6, 7, 8]))
#
# # #error2:
# # #分别平方相加求和
def squ_sum(n):
    ss=0
    for j in range(n):
        ss=ss+(j+1)**2
    return(ss)

for i in range(5):
    print('第%d个数'%(i+1))
    out3 = squ_sum(i+1)
    print('累加平方求和值为%d'%out3)

